#include <stdio.h>
#include <stdlib.h>

#define SIZE 5   // max size of queue
int queue[SIZE];
int front = -1, rear = -1;

// Count elements
int count() {
    if (front == -1) return 0;
    if (rear >= front) return rear - front + 1;
    else return SIZE - front + rear + 1;
}

// Enqueue
void enqueue(int value) {
    if ((rear + 1) % SIZE == front) {
        printf("Queue full.\n");
        return;
    }
    if (front == -1) front = 0;
    rear = (rear + 1) % SIZE;
    queue[rear] = value;
    printf("Enqueued %d\n", value);
}

// Dequeue
void dequeue() {
    if (front == -1) {
        printf("Queue empty.\n");
        return;
    }
    printf("Dequeued %d\n", queue[front]);
    if (front == rear) front = rear = -1; // queue becomes empty
    else front = (front + 1) % SIZE;
}

// Display
void display() {
    if (front == -1) {
        printf("Queue empty.\n");
        return;
    }
    printf("Queue: ");
    int i = front;
    while (1) {
        printf("%d ", queue[i]);
        if (i == rear) break;
        i = (i + 1) % SIZE;
    }
    printf("\n");
}

int main() {
    int choice, value;

    while (1) {
        printf("\n--- Circular Queue Menu ---\n");
        printf("1. Enqueue\n2. Dequeue\n3. Display\n4. Count\n5. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value: ");
                scanf("%d", &value);
                enqueue(value);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Total elements: %d\n", count());
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice.\n");
        }
    }
}
